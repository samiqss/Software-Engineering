Lab 05 (a) Instructions

This repository contains one header file (takehome9.h) and two .cpp files
(takehome9.cpp and sumAll.cpp).
 - takehome9.h contains the prototypes for takehome9.cpp
 - takehome9.cpp implements a sum function that accepts a variable number of parameters
 - sumAll.cpp contains a main routine calling the sum function

The user needs a makefile to generate both the final executable and a series
of intermediate file states:
 - takehome9e.cpp: the C++ code generated by the preprocessor, immediately prior to compiling
 - takehome9.s: the assembly language translation of takehome9.cpp
 - takehome9.o: the independent object code for takehome9.cpp
 - sumAll.o: the independent object code for sumAll.cpp
 - takehome9: the final working executable

The dependencies and compilation commands are as follows:

  takehome9 depends on sumAll.o and takehome9.o, and is built using
     g++ -Wall -Wextra takehome9.o sumAll.o -o takehome9

  takehome9.o depends on takehome9.s and is built using
     as --gstabs takehome9.s -o takehome9.o

  sumAll.o depends on takehome9.h and sumAll.cpp and is built using
     g++ -Wall -Wextra -c sumAll.cpp -o sumAll.o

  takehome9.s depends on takehome9.cpp and is built using
     g++ -Wall -Wextra -S takehome9.cpp -fno-asynchronous-unwind-tables

  takehome9e.cpp depends on takehome9.cpp and is built using
     g++ -E -Wall -Wextra takehome9.cpp -o takehome9e.cpp

Your makefile must correctly implement the build sequences, options,
   and dependencies listed above.

Your makefile must also include a target named all, with no build rule
   but with dependencies takehome9 and takehome9e.cpp.  This should be
   the first target in the makefile (thus if someone just types "make"
   it will run "make all" and effectively rebuild everything if needed).

Your makefile must also include a target named clean, with dependencies
   takehome9e.cpp, takehome9.o, sumAll.o, and takehome9.s, and which
   runs rm -f on exactly those four files.

You should also configure your makefile to use the following variables
to simplify later changes to the makefile compiler, assembler, or options:
CC=g++ -Wall -Wextra
ASM=as --gstabs
SIMPLE=-fno-asynchronous-unwind-tables
EXPAND=-E
OBJ=-c
TOASM=-S


Be sure your makefile works, and only recompiles what is absolutely necessary.

For testing purposes, it is recommended you use the command
    touch filename
which alters the modification date for the specified file without
needing to actually edit it.

   E.g. I could run make all, then touch sumAll.cpp and run make again
   to see if it compiles just the necessary files rather than all of them.

Notes on the code/tester program itself:

   While you don't really need to understand the program or what the various functions
   are doing, when you have the time I would still recommend browsing through the code
   files to see how the variable number of parameters gets handled and take a look at
   the resulting assembly language.

